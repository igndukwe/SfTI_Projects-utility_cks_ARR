# Read this Post for runing processis in parallel
# https://stackoverflow.com/questions/42979271/how-to-run-multiple-instances-of-the-same-python-script-which-uses-subprocess-ca
# 
# How to use this program
# srun python s2_chk_styl_ana_app_ARR.py -t 577 -pd ../my_codesnippet_analysis/CheckStyle3/mvn_apps -upd -cf ../my_codesnippet_analysis/CheckStyle3/checkstylecompletesnippets_java -ucf -xrf ../my_codesnippet_analysis/CheckStyle3/checkstylexmlreports_xml -uxrf -ef ../my_codesnippet_analysis/CheckStyle3/checkstyleerrorsnippets_java -lf ../my_codesnippet_analysis/CheckStyle3/checkstyle_logs.txt

# srun python s2_chk_styl_ana_app_ARR.py -idx "${SLURM_ARRAY_TASK_ID}" -t 577 -crd ../my_codesnippet_analysis/CheckStyle3 -ucrd -pd mvn_apps -upd -xrf checkstylexmlreports_xml -uxrf -ef checkstyleerrorsnippets_java -lf checkstyle_logs.txt


# Fetch the Files 
# Divide the Files equaliy according to the number
# Generate the Maven Applications based on the number of files
# delete the initial App.java file created by default
# Update the Pom.xml File to suite
# add google check.xml

import subprocess as sp
# what will be used to read files
import glob
import shutil
import os
import re

import xml.etree.ElementTree as ET
#from xml.dom import minidom

import argparse

parser = argparse.ArgumentParser(
    description='Run CheckStyle on Java Apps.'
)

parser.add_argument(
    "-idx",
    "--arrayid",
    type=str,
    help="Enter SLURM ARRAY TASK ID"
)

parser.add_argument(
    "-n",
    "--size",
    default=577,
    type=int,
    help="Enter number of jobs to execute"
)

parser.add_argument(
    "-ucrd",
    "--usecommonrootdir",
    action="store_true",
    help="Use common root directory"
)
#e.g. ../my_codesnippet_analysis/CheckStyle3
parser.add_argument(
    "-crd",
    "--commonrootdir",
    help="Use common root directory"
)

parser.add_argument(
    "-upd",
    "--useparentdest",
    action="store_true",
     help="Parent path where multiple folders will be generated (before the autogenerated folders)"
    
)

#e.g., ../my_codesnippet_analysis/CheckStyle3/mvn_apps
#e.g., mvn_apps   (if usecommonrootdir is true)
parser.add_argument(
    "-pd",
    "--parentdest",
    type=str, 
     help="Parent path where multiple folders will be generated (before the autogenerated folders)"
    
)

parser.add_argument(
    "-a",
    "--app",
    default='my-javacodeanalysis-app',
    help="Enter general application name that will be auto generated e.g my-javacodeanalysis-app with will be appended with numbers 0, 1, ..., n"
)

parser.add_argument(
    "-t",
    "--sourcetype",
    default="java",
    type=str,
    help="Enter source type java, py, cpp"
)

parser.add_argument(
    "-cd",
    "--childdest",
    default="src/main/java",
    type=str, 
     help="The child destination path(s) where the multiple subfolders you want to copy files to (after the autogenerated folders)"
)


parser.add_argument(
    "-p",
    "--pkg",
    default='myjavacodeanalysis',
    help="Enter the package name you want each class to have or the java files to be moved to"
)

#e.g. ../my_codesnippet_analysis/CheckStyle3/checkstyle_logs.txt
#e.g., checkstyle_logs.txt  (if usecommonrootdir is true)
parser.add_argument(
    "-lf",
    "--logfile",
    help="Enter logation to logfile"
)
#e.g., ../my_codesnippet_analysis/CheckStyle3/checkstylecompletesnippets_java
#e.g., checkstylecompletesnippets_java  (if usecommonrootdir is true)
parser.add_argument(
    "-cf",
    "--completefiles",
    help="Location to save the Java Files of the completed checks"
)

parser.add_argument(
    "-ucf",
    "--usecompletefiles",
    action="store_true",
    help="Location to save the Java Files of the completed checks"
)

parser.add_argument(
    "-mcf",
    "--movecompletefiles",
    action="store_true",
    help="Put this to move complete files"
)

#e.g., ../my_codesnippet_analysis/CheckStyle3/checkstyleerrorsnippets_java
#e.g., checkstyleerrorsnippets_java  (if usecommonrootdir is true)
parser.add_argument(
    "-ef",
    "--errorfiles",
    help="Location to save the erroneous Java Files with their code snippets"
)

# 
#e.g., ../my_codesnippet_analysis/CheckStyle3/checkstylexmlreports_xml
#e.g., checkstylexmlreports_xml  (if usecommonrootdir is true)
parser.add_argument(
    "-xrf",
    "--xmlreportfiles",
    help="Location to save the erroneous Java Files with their code snippets"
)

# command -rv ---> sets rv to True
# command --->sets rv to False
#https://stackoverflow.com/questions/60999816/argparse-not-parsing-boolean-arguments
parser.add_argument(
    "-uxrf",
    "--usexmlreportfiles",
    action="store_true",
    help="Copy the xml report from target directory"
)




args = parser.parse_args()

array_id = args.arrayid
size = args.size
java_pkg = args.pkg
java_app = args.app
src_type = args.sourcetype
use_parent_dest_path = args.useparentdest
parent_dest_path = args.parentdest
use_comm_root_dir = args.usecommonrootdir
comm_root_dir = args.commonrootdir
child_dest_path = args.childdest
log_file = args.logfile
use_comp_java_files = args.usecompletefiles
comp_java_files = args.completefiles
move_comp_files = args.movecompletefiles
use_xml_rep_files = args.usexmlreportfiles
xml_rep_files = args.xmlreportfiles
error_java_files = args.errorfiles




####################################################################
# Run Checkstyle static code analysis
###################################################################

def run_chk_styl_analysis():
        
    #e.g. my-javacodeanalysis-app0
    app_name_full = '{}{}'.format(java_app, array_id)
    
    #e.g. my-javacodeanalysis-app0
    app_name_full_dest_path = app_name_full
    
    
    if use_comm_root_dir == True and use_parent_dest_path == True:
        #e.g., ../my_codesnippet_analysis/CheckStyle3/mvn_apps/my-javacodeanalysis-app0
        app_name_full_dest_path = '{}/{}/{}'.format(comm_root_dir, parent_dest_path, app_name_full)
    elif use_comm_root_dir == True:
        #e.g., ../my_codesnippet_analysis/CheckStyle3/mvn_apps/my-javacodeanalysis-app0
        app_name_full_dest_path = '{}/{}'.format(comm_root_dir, app_name_full)
    elif use_parent_dest_path == True:
        app_name_full_dest_path = '{}/{}'.format(parent_dest_path, app_name_full)
        
    #print('@@ {}'.format(app_name_full_parent_dest_path))
    
    #e.g., ../my_codesnippet_analysis/CheckStyle3/mvn_apps/my-javacodeanalysis-app0/src/main/java
    app_name_full_child_dest_path = '{}/{}'.format(app_name_full_dest_path, child_dest_path)
    #e.g., ../my_codesnippet_analysis/CheckStyle3/mvn_apps/my-javacodeanalysis-app0/src/main/java/myjavacodeanalysis
    app_name_full_child_dest_path_pkg = '{}/{}'.format(app_name_full_child_dest_path, java_pkg)
    
    log_file_full = log_file
    comp_java_files_full = comp_java_files
    error_java_files_full = error_java_files
    xml_rep_files_full = xml_rep_files
    
    
    if use_comm_root_dir == True:
        #e.g. ../my_codesnippet_analysis/CheckStyle3/checkstyle_logs.txt
        log_file_full = '{}/{}'.format(comm_root_dir, log_file)
        #e.g., ../my_codesnippet_analysis/CheckStyle3/checkstyleerrorsnippets_java
        error_java_files_full = '{}/{}'.format(comm_root_dir, error_java_files)
        
        if use_comp_java_files == True:
            #e.g., ../my_codesnippet_analysis/CheckStyle3/checkstylecompletesnippets_java
            comp_java_files_full = '{}/{}'.format(comm_root_dir, comp_java_files)
        
        if use_xml_rep_files == True:
            #e.g., ../my_codesnippet_analysis/CheckStyle3/checkstylexmlreports_xml
            xml_rep_files_full = '{}/{}'.format(comm_root_dir, xml_rep_files)
        
        
    
        
        
    error = True
    count = 0
        
    while error:
        #checkstyle_cmd = 'cd ../my_codesnippet_analysis/CheckStyle3/mvn_apps/my-javacodeanalysis-app0; mvn -e checkstyle:checkstyle'
        checkstyle_cmd = 'cd {}; mvn -e checkstyle:checkstyle'.format(app_name_full_dest_path)
        cmd1 = sp.run(
            checkstyle_cmd, # command
            capture_output=True,
            text=True,
            shell=True
        )
        
        # capture the output 
        log_msg = cmd1.stdout
        #log_msg = 'ERROR'

        # Perform some text processing
        # 1. capture the error msg and save it into a log file

        # Open a file with access mode 'a'
        #with open("checkstyle_logs.txt", "a") as file_object:
        with open(log_file_full, "a") as file_object:
            
            # Append log_msg at the end of file
            file_object.write(log_msg)
            
        # If there is error in the log file
        if 'ERROR' in log_msg: 

            error = True
            # 2. retrieve the erroneous file
            pattern = re.compile(r'Code_\d+_\d+_\d+_\d+\.java')
            #pattern = re.compile(r'Code_\d+_\d+_\d+_\d+\.{}'.format(src_type))
            #filename_match = pattern.findall(log_msg)[0]
            filename_match = pattern.findall(log_msg)
            #filename_match ='Code_52604169_52604034_2681_0.java'
            if len(filename_match) > 0:
                filename_match = filename_match[0]
                # print(filename_matche)

                # 3. Move the erroneous file to another folder 'checkstyleerrorsnippets_java'
                #e.g., mv_erroneous_file_cmd = 'mv ../my_codesnippet_analysis/CheckStyle3/mvn_apps/my-javacodeanalysis-app0/src/main/java/myjavacodeanalysis/Code_1_1_1_1.java' ../my_codesnippet_analysis/CheckStyle3/checkstyleerrorsnippets_java'
                mv_erroneous_file_cmd = 'mv {}/{} {}'.format(app_name_full_child_dest_path_pkg, filename_match, error_java_files_full)
                #print("@@MOVE@@ {}".format(mv_erroneous_file_cmd))
                cmd2 = sp.run(
                    mv_erroneous_file_cmd, # command
                    capture_output=True,
                    text=True,
                    shell=True
                )
                   
        else: # else If there is error when carring out the checkstyle
            error = False

        count = count + 1
        # 4. re-run the comand until all the error files have been eliminated

        
    #2. Move the java files of thoes that completed into a checkstylecompletesnippets_java
    # e.g., mv_complete_file_cmd = 'mv ../my_codesnippet_analysis/CheckStyle3/mvn_apps/my-javacodeanalysis-app0/src/main/java/myjavacodeanalysis/*.java ../my_codesnippet_analysis/CheckStyle3/checkstylecompletesnippets_java'
    if move_comp_files == True:
        mv_complete_file_cmd = 'mv {}/*.{} {}'.format(app_name_full_child_dest_path_pkg, src_type, comp_java_files_full)
        cmd3 = sp.run(
            mv_complete_file_cmd, # command
            capture_output=True,
            text=True,
            shell=True
        )
      
        
    if use_xml_rep_files == True:
        # Copy and rename checkstyle-result.xml at the same time 
        # e.g., cd ../my_codesnippet_analysis/CheckStyle3/mvn_apps/my-javacodeanalysis-app0/target; cp checkstyle-result.xml checkstyle-result0.xml
        cd_mv_xml_rep_frm_cmd = 'cd {}/target; cp checkstyle-result.xml checkstyle-result{}.xml'.format(app_name_full_dest_path, array_id)
        cmd4 = sp.run(
            cd_mv_xml_rep_frm_cmd, # command
            capture_output=True,
            text=True,
            shell=True
        )
        
        #move the renamed checkstyle-result.xml to another location
        # e.g., mv ../my_codesnippet_analysis/CheckStyle3/mvn_apps/my-javacodeanalysis-app0/target/*-result0.xml ../my_codesnippet_analysis/CheckStyle3/checkstylexmlreports_xml
        mv_xml_rep_frm_cmd = 'mv {}/target/checkstyle-result{}.xml {}'.format(app_name_full_dest_path, array_id, xml_rep_files_full)
        cmd5 = sp.run(
            mv_xml_rep_frm_cmd, # command
            capture_output=True,
            text=True,
            shell=True
        )
        

    
# Run the CheckStyle Analysis
run_chk_styl_analysis()

print('CheckStyle Analysis Complete Rank {} -:)'.format(array_id))
# Next step
# 1. mv all the other .java files in the apps that did not complete into checkstyleincompletesnippets_java files
# 2. split it equally
# 3. redistribut it amoungs the maven apps again
# 4. Run the check style again



